generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String        @id @default(cuid())
  name              String
  email             String        @unique
  password          String
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  verificationToken String?
  phone             String        @unique
  accountStatus     AccountStatus @default(UNVERIFIED)
  Reservation       Reservation[]
}

model Owner {
  id                String        @id @default(cuid())
  name              String
  email             String        @unique
  phone             String        @unique
  password          String
  company           String?
  accountStatus     AccountStatus @default(UNVERIFIED)
  verificationToken String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  pitches           Pitch[]
}

model Ground {
  id           String        @id @default(cuid())
  pitchId      String
  index        Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  images       String[]
  price        Float
  size         GroundSize
  surface      GroundSurface
  status       GroundStatus  @default(ACTIVE)
  pitch        Pitch         @relation(fields: [pitchId], references: [id])
  reservations Reservation[]
}

model Pitch {
  id             String                   @id @default(cuid())
  ownerId        String
  name           String
  description    String
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt
  images         String[]
  minimumSession Int                      @default(1)
  maximumSession Int                      @default(6)
  amenities      PitchAmenity[]
  location       Json
  settings       Json
  coordinates    Unsupported("geometry")
  search         Unsupported("tsvector")? @default(dbgenerated("to_tsvector('english'::regconfig, name)"))
  owner          Owner                    @relation(fields: [ownerId], references: [id])
  grounds        Ground[]

  @@index([coordinates], map: "coordinates_idx", type: Gist)
  @@index([search], map: "search_idx", type: Gin)
}

model Reservation {
  id             String            @id @default(uuid())
  groundId       String
  userId         String?
  reserveeName   String
  reserveePhone  String
  startDate      DateTime
  endDate        DateTime
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  createdBy      AccountType
  status         ReservationStatus @default(PENDING)
  ground         Ground            @relation(fields: [groundId], references: [id])
  user           User?             @relation(fields: [userId], references: [id])
  payment        Payment?
}

model Payment {
  id            String        @id @default(uuid())
  reservationId String        @unique
  amount        Float
  status        PaymentStatus @default(PENDING)
  isManual      Boolean       @default(false)
  voidDate      DateTime
  expiryDate    DateTime
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  reservation   Reservation   @relation(fields: [reservationId], references: [id])
}

enum AccountType {
  USER
  OWNER
}

enum AccountStatus {
  UNVERIFIED
  ACTIVE
  SUSPENDED
  DELETED
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  DONE
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  REFUNDED
  EXPIRED
  CANCELLED
  MANUAL
}

enum GroundStatus {
  ACTIVE
  MAINTENANCE
  CLOSED
}

enum GroundSize {
  FIVE_A_SIDE
  SEVEN_A_SIDE
  ELEVEN_A_SIDE
}

enum GroundSurface {
  NATURAL
  ARTIFICIAL
}

enum PitchAmenity {
  INDOORS
  BALL_PROVIDED
  SEATING
  NIGHT_LIGHTS
  PARKING
  SHOWERS
  CHANGING_ROOMS
  CAFETERIA
  FIRST_AID
  SECURITY
}
